pipeline {
    agent any

    tools {
        maven 'M2_HOME'
    }

    environment {
        IMAGE_NAME = "chandrabhant98/banking04"
    }

    stages {
        stage('CheckOut') {
            steps {
                echo 'Checkout the source code from GitHub'
                git branch: 'main', url: 'https://github.com/chandrabhant98/star-agile-banking-finance.git'
            }
        }
        stage('Package') {
            steps {
                echo 'Create a Package'
                sh 'mvn clean package'
            }
        }
        stage('Publish Test Report') {
            steps {
                echo 'Publishing Test Report'
                publishHTML([
                    allowMissing: false, 
                    alwaysLinkToLastBuild: false, 
                    keepAll: false, 
                    reportDir: 'target/surefire-reports', 
                    reportFiles: 'index.html', 
                    reportName: 'HTML Report', 
                    reportTitles: ''
                ])
            }
        }
        stage('Create Image using the package') {
            steps {
                echo 'Creating a Docker image from the package'
                sh "docker build -t ${IMAGE_NAME} ."
            }
        }
        stage('Docker login') {
            steps {
                echo 'Login to Docker Hub to push the images'
                withCredentials([usernamePassword(credentialsId: 'Dockerlogin-user', passwordVariable: 'Dockerpassword', usernameVariable: 'Dockerlogin')]) {
                    sh "echo ${Dockerpassword} | docker login -u ${Dockerlogin} --password-stdin"
                }
            }
        }
        stage('Push the Image') {
            steps {
                echo 'Pushing the Docker image to Docker Hub'
                sh "docker push ${IMAGE_NAME}"
            }
        }
    }

    post {
        always {
            echo 'Cleaning up Docker images'
            sh "docker rmi ${IMAGE_NAME}"
        }
        success {
            echo 'Pipeline completed successfully'
        }
        failure {
            echo 'Pipeline failed'
        }
    }
}
